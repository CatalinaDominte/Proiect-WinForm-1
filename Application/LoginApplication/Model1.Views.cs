//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets16AA21DA53E10D855BE19B0AAC1673AE))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets16AA21DA53E10D855BE19B0AAC1673AE : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets16AA21DA53E10D855BE19B0AAC1673AE()
        {
            this.EdmEntityContainerName = "DBEntities";
            this.StoreEntityContainerName = "DBModelStoreContainer";
            this.HashOverMappingClosure = "ba363af196f6683b32e063cbef2d4868";
            this.HashOverAllExtentViews = "ce2dfceb3f39049044655a8d86fe5613";
            this.ViewCount = 7;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DBModelStoreContainer.Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBModelStoreContainer.Category", @"
    SELECT VALUE -- Constructing Category
        [DBModel.Store.Category](T1.Category_CategoryId, T1.Category_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS Category_CategoryId, 
            T.CategoryName AS Category_CategoryName, 
            True AS _from0
        FROM DBEntities.Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DBModelStoreContainer.Product
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBModelStoreContainer.Product", @"
    SELECT VALUE -- Constructing Product
        [DBModel.Store.Product](T3.Product_Id, T3.Product_Name, T3.Product_price, T3.Product_CategoryId, T3.Product_ProductsDescription, T3.Product_UnitsInStock)
    FROM (
        SELECT T1.Product_Id, T1.Product_Name, T1.Product_price, T2.Product_CategoryId, T1.Product_ProductsDescription, T1.Product_UnitsInStock, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Product_Id, 
                T.Name AS Product_Name, 
                T.price AS Product_price, 
                T.ProductsDescription AS Product_ProductsDescription, 
                T.UnitsInStock AS Product_UnitsInStock, 
                True AS _from0
            FROM DBEntities.Products AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Product).Id AS Product_Id, 
                Key(T.Category).CategoryId AS Product_CategoryId, 
                True AS _from1
            FROM DBEntities.FK__Product__Categor__145C0A3F AS T) AS T2
            ON T1.Product_Id = T2.Product_Id
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for DBEntities.Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBEntities.Categories", @"
    SELECT VALUE -- Constructing Categories
        [DBModel.Category](T1.Category_CategoryId, T1.Category_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS Category_CategoryId, 
            T.CategoryName AS Category_CategoryName, 
            True AS _from0
        FROM DBModelStoreContainer.Category AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DBEntities.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBEntities.Products", @"
    SELECT VALUE -- Constructing Products
        [DBModel.Product](T1.Product_Id, T1.Product_Name, T1.Product_price, T1.Product_ProductsDescription, T1.Product_UnitsInStock) WITH 
        RELATIONSHIP(CREATEREF(DBEntities.Categories, ROW(T1.[FK__Product__Categor__145C0A3F.Category.CategoryId]),[DBModel.Category]),[DBModel.FK__Product__Categor__145C0A3F],Product,Category) 
    FROM (
        SELECT 
            T.Id AS Product_Id, 
            T.Name AS Product_Name, 
            T.price AS Product_price, 
            T.ProductsDescription AS Product_ProductsDescription, 
            T.UnitsInStock AS Product_UnitsInStock, 
            True AS _from0, 
            T.CategoryId AS [FK__Product__Categor__145C0A3F.Category.CategoryId]
        FROM DBModelStoreContainer.Product AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DBEntities.FK__Product__Categor__145C0A3F
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBEntities.FK__Product__Categor__145C0A3F", @"
    SELECT VALUE -- Constructing FK__Product__Categor__145C0A3F
        [DBModel.FK__Product__Categor__145C0A3F](T3.[FK__Product__Categor__145C0A3F.Category], T3.[FK__Product__Categor__145C0A3F.Product])
    FROM (
        SELECT -- Constructing Category
            CreateRef(DBEntities.Categories, row(T2.[FK__Product__Categor__145C0A3F.Category.CategoryId]), [DBModel.Category]) AS [FK__Product__Categor__145C0A3F.Category], 
            T2.[FK__Product__Categor__145C0A3F.Product]
        FROM (
            SELECT -- Constructing Product
                T1.[FK__Product__Categor__145C0A3F.Category.CategoryId], 
                CreateRef(DBEntities.Products, row(T1.[FK__Product__Categor__145C0A3F.Product.Id]), [DBModel.Product]) AS [FK__Product__Categor__145C0A3F.Product]
            FROM (
                SELECT 
                    T.CategoryId AS [FK__Product__Categor__145C0A3F.Category.CategoryId], 
                    T.Id AS [FK__Product__Categor__145C0A3F.Product.Id], 
                    True AS _from0
                FROM DBModelStoreContainer.Product AS T
                WHERE T.CategoryId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for DBModelStoreContainer.login
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBModelStoreContainer.login", @"
    SELECT VALUE -- Constructing login
        [DBModel.Store.login](T1.login_Id, T1.login_UserName, T1.login_Password)
    FROM (
        SELECT 
            T.Id AS login_Id, 
            T.UserName AS login_UserName, 
            T.Password AS login_Password, 
            True AS _from0
        FROM DBEntities.logins AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DBEntities.logins
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DBEntities.logins", @"
    SELECT VALUE -- Constructing logins
        [DBModel.login](T1.login_Id, T1.login_UserName, T1.login_Password)
    FROM (
        SELECT 
            T.Id AS login_Id, 
            T.UserName AS login_UserName, 
            T.Password AS login_Password, 
            True AS _from0
        FROM DBModelStoreContainer.login AS T
    ) AS T1");
        }
    }
}
